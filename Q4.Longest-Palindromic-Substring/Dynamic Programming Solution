public String longestPalindrome(String s) {
        if (s == null)
            return null;
        if (s.length() == 1)
            return s;
        
        int maxLen = 0;
        String longSub = null;
        
        int length = s.length();
        
        int[][] table = new int[length][length];
        
        //The string with a single letter
        for (int i = 0; i < length; i++) {
            table[i][i] = 1;
        }
        //A string with two identicle letter
        for (int i = 0; i <= length - 2; i++) {
            if (s.charAt(i) == s.charAt(i + 1)){
                table[i][i+1] = 1;
                longSub = s.substring(i, i + 2);
            }
        }
        //This is the common situation
        
        for (int l = 3; l <= length; l++) {
            for (int i = 0; i <= length - l; i++) {
                int j = i + l -1;
                if (s.charAt(i) == s.charAt(j)) {
                    table[i][j] = table[i + 1][j - 1];
                    if (table[i][j] == 1 && l > maxLen) {
                        longSub = s.substring(i, j + 1);
                    }
                } else {
                    table[i][j] = 0;
                }
            }
        }
        return longSub;
    }
