public class Solution {
    public TreeNode buildTree(int[] preorder, int[] inorder) {
        if(preorder.length == 0) return null;
        return buildTree(preorder, inorder, 0, 0, inorder.length - 1);
    }
    public TreeNode buildTree(int[] preorder, int[] inorder, int preIndex, int start, int end) {
        if (start > end) return null;
        TreeNode root = new TreeNode(preorder[preIndex]);
        int inIndex = findInorderIndex(inorder, start, end, preorder[preIndex]);
        int leftSize = inIndex - start;
        int rightSize = end - inIndex;
        root.left = buildTree(preorder, inorder, preIndex + 1, start, inIndex - 1);
        root.right = buildTree(preorder, inorder, preIndex + leftSize + 1, inIndex + 1, end);
        return root;
    }
    public int findInorderIndex(int[] inorder, int start, int end, int key) {
        for (int i = start; i <= end; i++) {
            if (inorder[i] == key) {
                return i;
            }
        }
        return -1;
    }
}
