public class Solution {
    public String largestNumber(int[] nums) {
        if (nums.length == 0) return "";
        if (nums.length == 1) return String.valueOf(nums[0]);
        StrCompare[] nm = new StrCompare[nums.length];
        for (int i = 0; i < nums.length; i++) {
            nm[i] = new StrCompare(nums[i]);
        }
        Arrays.sort(nm);
        if (nm[0].num.equals("0")) return "0";
        StringBuilder sb = new StringBuilder();
        for (StrCompare nm1 : nm) {
            sb.append(nm1.num);
        }
        return sb.toString();
    }
    class StrCompare implements Comparable<StrCompare>  {
        String num;
        public StrCompare (int n) {
            this.num = String.valueOf(n);
        }
        @Override
        public int compareTo (StrCompare n) {
            String s1 = n.num + this.num;
            String s2 = this.num + n.num;
            for (int i = 0; i < s1.length(); i++) {
                if (s1.charAt(i) > s2.charAt(i)) return 1;
                else if (s1.charAt(i) < s2.charAt(i)) return -1;
            }
            return 0;
        }
    }
}
