public class Solution {
    public int uniquePathsWithObstacles(int[][] obstacleGrid) {
        int n = obstacleGrid[0].length;
        int m = obstacleGrid.length;
        if (obstacleGrid[m - 1][n - 1] == 1|| obstacleGrid[0][0] == 1) {
            return 0;
        }
        int[][] res = new int[m][n];
        for (int i = 0; i < m ; i++) {
            if (obstacleGrid[i][0] == 1) {
                for (int j = i; j < m; j++) {
                    res[j][0] = 0;
                }
                break;
            } 
            res[i][0] = 1;
        }
        for (int i = 1; i < n ; i++) {
            if (obstacleGrid[0][i] == 1) {
                for (int j = i; j < n; j++) {
                    res[0][j] = 0;
                }
                break;
            } 
            res[0][i] = 1;
            
        }
        for (int i = 1; i < m; i++) {
            for (int j = 1; j < n; j++) {
                if (obstacleGrid[i - 1][j] == 1 && obstacleGrid[i][j - 1] == 1) {
                    res[i][j] = 0;
                } else if (obstacleGrid[i - 1][j] == 1) {
                    res[i][j] = res[i][j - 1];
                } else if (obstacleGrid[i][j - 1] == 1) {
                    res[i][j] = res[i - 1][j];
                } else {
                    res[i][j] = res[i - 1][j] + res[i][j - 1];
                }
            }
        }
        return res[m - 1][n -1];
    }
}
