public int trap(int[] height) {
    int secHight = 0;
    int left = 0;
    int right = height.length - 1;
    int area = 0;
    while (left < right) {
        if (height[left] < height[right]) {
            secHight = Math.max(height[left], secHight);
            area += secHight - height[left];
            left++;
        } else {
            secHight = Math.max(height[right], secHight);
            area += secHight - height[right];
            right--;
        }
    }
    return area;
}


Basically this solution runs two pointers from two sides to the middle, and the plank is used to record the height 
of the elevation within a certain range, plank height can only increase (or remain the same) from two sides to the middle. 
If the current pointer is pointing at a number that is less than the current plank height, 
the difference between plank height and the number would be the amount of water trapped. Otherwise, A[i] == plank, 
no water is trapped.
