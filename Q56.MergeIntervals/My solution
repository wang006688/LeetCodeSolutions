public class Solution {
    public List<Interval> merge(List<Interval> intervals) {
        List<Interval> res = new ArrayList<>();
        if (intervals == null || intervals.size() < 1) return res;
        interCom[] list = new interCom[intervals.size()];
        ListIterator<Interval> it = intervals.listIterator();
        for (int i = 0; i < intervals.size(); i++) {
            if (it.hasNext()) {
                list[i] = new interCom(it.next());
            }
        }
        Arrays.sort(list);
        for (int i = 0; i < list.length; i++) {
            int j = i;
            int max = list[i].inter.end, min = list[i].inter.start;
            while (j + 1 < list.length &&  (max = Math.max(max, list[j].inter.end)) >= list[j + 1].inter.start) {
                max = Math.max(max, list[j + 1].inter.end);
                j++;
            }
            res.add(new Interval(min, max));
            i = j;
        }
        return res;
    }
    public class interCom implements Comparable<interCom> {
        private final Interval inter;
        public interCom(Interval interval) {
            inter = interval;
        }
        @Override
        public int compareTo(interCom interCom) {
            if (this.inter.start < interCom.inter.start) {
                return -1;
            } else if (this.inter.start > interCom.inter.start) {
                return 1;
            } else {
                return 0;
            }
        }
    }
}
