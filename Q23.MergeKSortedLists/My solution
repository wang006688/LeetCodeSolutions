public class Solution {
    public ListNode mergeKLists(ListNode[] lists) {
        return parts(lists, 0, lists.length - 1);
    }
    public ListNode parts(ListNode[] lists, int start, int end) {
        if (start == end) {
            return lists[start];
        } else if (start < end) {
            int mid = (start + end) / 2;
            ListNode left = parts(lists, start, mid);
            ListNode right = parts(lists, mid + 1, end);
            return merge(left, right);
        } else {
            return null;
        }
    }
    public ListNode merge(ListNode left, ListNode right) {
        if (left == null) return right;
        if (right == null) return left;
        if (left.val < right.val) {
            left.next = merge(left.next, right);
            return left;
        } else {
            right.next = merge(left, right.next);
            return right;
        }
    }
}
