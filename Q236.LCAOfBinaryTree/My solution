public class Solution {
    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
        if (root == p || root == q) return root;
        if (root.left != null && root.right == null) {
            return lowestCommonAncestor(root.left, p, q);
        } else if (root.right != null && root.left == null){
            return lowestCommonAncestor(root.right, p, q);
        } else {
            if (contains(root.left, p) && contains(root.left, q)) {
                return lowestCommonAncestor(root.left, p, q);
            } else if (contains(root.right, p) && contains(root.right, q)) {
                return lowestCommonAncestor(root.right, p, q);
            } else {
                return root;
            }
        }
    }
    public boolean contains(TreeNode root, TreeNode t) {
        Stack<TreeNode> stack = new Stack<>();
        while (root != null || !stack.isEmpty()) {
            while (root != null) {
                if (root == t) return true;
                stack.push(root);
                root = root.left;
            }
            root = stack.pop();
            root = root.right;
        }
        return false;
    }
}
