public class Solution {
    public int[] findOrder(int numCourses, int[][] prerequisites) {
        List<List<Integer>> adj = new ArrayList<>(numCourses);
        for (int i = 0; i < numCourses; i++) {
            adj.add(i, new ArrayList<Integer>());
        }
        for (int[] prerequisite : prerequisites) {
            adj.get(prerequisite[1]).add(prerequisite[0]);
        }
        boolean[] visited = new boolean[numCourses];
        Stack<Integer> stack = new Stack<>();
        for (int i = 0; i < numCourses; i++) {
            if (!topologicalSort(adj, i, stack, visited, new boolean[numCourses])) {
                return new int[0];
            }
        }
        int i = 0;
        int[] res = new int[numCourses];
        while (!stack.isEmpty()) {
            res[i++] = stack.pop();
        }
        return res;
    }
    public boolean topologicalSort(List<List<Integer>> adj, int i, Stack<Integer> stack, boolean[] visited, boolean[] isLoop) {
        if (visited[i]) return true;
        if (isLoop[i]) return false;
        isLoop[i] = true;
        for (Integer n : adj.get(i)) {
            if (!topologicalSort(adj, n, stack, visited, isLoop)) 
                return false;
        }
        visited[i] = true;
        stack.push(i);
        return true;
    }
}
